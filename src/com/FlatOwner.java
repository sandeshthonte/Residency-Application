/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com;

//import com.mongodb.client.MongoDatabase; 

import com.ResidencyManagement.Issues;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import static com.mongodb.client.model.Filters.eq;
import com.mongodb.client.model.Updates;
import static com.mongodb.client.model.Updates.set;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.LayoutManager;
//import java.awt.List;

import java.util.List;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;
import org.bson.conversions.Bson;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;

//import com.mongodb.MongoClient; 
//import com.mongodb.MongoCredential;  
//import javax.swing.JOptionPane;

/**
 *
 * @author Sandesh
 */
public class FlatOwner extends javax.swing.JFrame {

    /**
     * Creates new form User
     */
    String username;
    public FlatOwner() {
        initComponents();
        pnlFlatOwner.removeAll();
        pnlFlatOwner.revalidate();
    }
public FlatOwner(String username) {
        initComponents();
        this.getContentPane().setBackground(new Color(72,209,204));
        pnlFlatOwner.removeAll();
        pnlFlatOwner.revalidate();
        this.username=username;
    }
public void infoMessage(String message,String title)
    {
        JOptionPane.showMessageDialog(null, message, title, JOptionPane.INFORMATION_MESSAGE);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnFlatOwnerViewProfile = new javax.swing.JButton();
        btnFlatOwnersEditProfile = new javax.swing.JButton();
        btnFlatOwnerViewAnnouncement = new javax.swing.JButton();
        btnFlatOwnersIssues = new javax.swing.JButton();
        btnFlatOwnerReminder = new javax.swing.JButton();
        pnlFlatOwner = new javax.swing.JLayeredPane();
        pnlFlatOwnerViewProfile = new javax.swing.JLayeredPane();
        lblFirstName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        lblApartmentName = new javax.swing.JLabel();
        lblMobileNumber = new javax.swing.JLabel();
        lblMobileNumber1 = new javax.swing.JLabel();
        lblMobileNumber2 = new javax.swing.JLabel();
        displayFirstName = new javax.swing.JLabel();
        displayLastName = new javax.swing.JLabel();
        displayGender = new javax.swing.JLabel();
        displayFlatNo = new javax.swing.JLabel();
        displayVehicles = new javax.swing.JComboBox<>();
        displayMobileNo = new javax.swing.JLabel();
        lblMobileNumber3 = new javax.swing.JLabel();
        displayEmergencyContact = new javax.swing.JLabel();
        displayResidents = new javax.swing.JComboBox<>();
        pnlFlatOwnerShowAnnouncement = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblShowAnnUser = new javax.swing.JTable();
        pnlFlatOwnerEditProfile = new javax.swing.JPanel();
        lblUpdateUserFirstName1 = new javax.swing.JLabel();
        btnUpdateUserSubmit1 = new javax.swing.JButton();
        showFlatNo = new javax.swing.JLabel();
        lblUpdateUserFirstName3 = new javax.swing.JLabel();
        lblUpdateUserFirstName4 = new javax.swing.JLabel();
        lblUpdateUserFirstName6 = new javax.swing.JLabel();
        lblUpdateUserFirstName7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        showFirstName = new javax.swing.JTextField();
        showLastName = new javax.swing.JTextField();
        showGender = new javax.swing.JTextField();
        showMobileNo = new javax.swing.JTextField();
        showEmergencyContact = new javax.swing.JTextField();
        showVehicles = new javax.swing.JComboBox<>();
        showResidents = new javax.swing.JComboBox<>();
        btnAddVehicle = new javax.swing.JButton();
        btnAddMember = new javax.swing.JButton();
        btnRemoveVehicle = new javax.swing.JButton();
        btnRemoveMember = new javax.swing.JButton();
        pnlFlatOwnerShowReminder = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblShowRemUser = new javax.swing.JTable();
        btnFlatOwnersLogout = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(72, 209, 204));

        btnFlatOwnerViewProfile.setFont(new java.awt.Font("Comic Sans MS", 0, 20)); // NOI18N
        btnFlatOwnerViewProfile.setText("View Profile");
        btnFlatOwnerViewProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFlatOwnerViewProfileActionPerformed(evt);
            }
        });

        btnFlatOwnersEditProfile.setFont(new java.awt.Font("Comic Sans MS", 0, 20)); // NOI18N
        btnFlatOwnersEditProfile.setText("Edit Profile");
        btnFlatOwnersEditProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFlatOwnersEditProfileActionPerformed(evt);
            }
        });

        btnFlatOwnerViewAnnouncement.setFont(new java.awt.Font("Comic Sans MS", 0, 20)); // NOI18N
        btnFlatOwnerViewAnnouncement.setText("View Announcement");
        btnFlatOwnerViewAnnouncement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFlatOwnerViewAnnouncementActionPerformed(evt);
            }
        });

        btnFlatOwnersIssues.setFont(new java.awt.Font("Comic Sans MS", 0, 20)); // NOI18N
        btnFlatOwnersIssues.setText("Issues");
        btnFlatOwnersIssues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFlatOwnersIssuesActionPerformed(evt);
            }
        });

        btnFlatOwnerReminder.setFont(new java.awt.Font("Comic Sans MS", 0, 20)); // NOI18N
        btnFlatOwnerReminder.setText("View Reminders");
        btnFlatOwnerReminder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFlatOwnerReminderActionPerformed(evt);
            }
        });

        pnlFlatOwner.setBackground(new java.awt.Color(72, 209, 204));
        pnlFlatOwner.setPreferredSize(new java.awt.Dimension(1370, 800));

        pnlFlatOwnerViewProfile.setPreferredSize(new java.awt.Dimension(1370, 800));

        lblFirstName.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        lblFirstName.setText("First Name");

        lblLastName.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        lblLastName.setText("Last Name");

        lblGender.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        lblGender.setText("Gender");

        lblApartmentName.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        lblApartmentName.setText("Flat No");

        lblMobileNumber.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        lblMobileNumber.setText("Mobile Number");

        lblMobileNumber1.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        lblMobileNumber1.setText("Vehicle(s)");

        lblMobileNumber2.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        lblMobileNumber2.setText("Residents");

        displayFirstName.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        displayLastName.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        displayGender.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        displayGender.setText(" ");

        displayFlatNo.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        displayFlatNo.setText(" ");

        displayVehicles.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        displayMobileNo.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        displayMobileNo.setText(" ");

        lblMobileNumber3.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        lblMobileNumber3.setText("Emergency Contact");

        displayEmergencyContact.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        displayEmergencyContact.setText(" ");

        displayResidents.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        pnlFlatOwnerViewProfile.setLayer(lblFirstName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwnerViewProfile.setLayer(lblLastName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwnerViewProfile.setLayer(lblGender, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwnerViewProfile.setLayer(lblApartmentName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwnerViewProfile.setLayer(lblMobileNumber, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwnerViewProfile.setLayer(lblMobileNumber1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwnerViewProfile.setLayer(lblMobileNumber2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwnerViewProfile.setLayer(displayFirstName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwnerViewProfile.setLayer(displayLastName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwnerViewProfile.setLayer(displayGender, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwnerViewProfile.setLayer(displayFlatNo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwnerViewProfile.setLayer(displayVehicles, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwnerViewProfile.setLayer(displayMobileNo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwnerViewProfile.setLayer(lblMobileNumber3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwnerViewProfile.setLayer(displayEmergencyContact, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwnerViewProfile.setLayer(displayResidents, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout pnlFlatOwnerViewProfileLayout = new javax.swing.GroupLayout(pnlFlatOwnerViewProfile);
        pnlFlatOwnerViewProfile.setLayout(pnlFlatOwnerViewProfileLayout);
        pnlFlatOwnerViewProfileLayout.setHorizontalGroup(
            pnlFlatOwnerViewProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFlatOwnerViewProfileLayout.createSequentialGroup()
                .addGap(350, 350, 350)
                .addGroup(pnlFlatOwnerViewProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblApartmentName)
                    .addGroup(pnlFlatOwnerViewProfileLayout.createSequentialGroup()
                        .addGroup(pnlFlatOwnerViewProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlFlatOwnerViewProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblMobileNumber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblMobileNumber2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblMobileNumber3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblMobileNumber1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlFlatOwnerViewProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblLastName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(41, 41, 41)
                        .addGroup(pnlFlatOwnerViewProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(displayFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                            .addComponent(displayEmergencyContact, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                            .addComponent(displayMobileNo, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                            .addComponent(displayFlatNo, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                            .addComponent(displayGender, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                            .addComponent(displayLastName, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                            .addComponent(displayResidents, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(displayVehicles, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(449, Short.MAX_VALUE))
        );
        pnlFlatOwnerViewProfileLayout.setVerticalGroup(
            pnlFlatOwnerViewProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFlatOwnerViewProfileLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlFlatOwnerViewProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(displayFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(31, 31, 31)
                .addGroup(pnlFlatOwnerViewProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(displayLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFlatOwnerViewProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(displayGender, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFlatOwnerViewProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblApartmentName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlFlatOwnerViewProfileLayout.createSequentialGroup()
                        .addComponent(displayFlatNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(9, 9, 9)))
                .addGroup(pnlFlatOwnerViewProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMobileNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(displayMobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(pnlFlatOwnerViewProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblMobileNumber3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlFlatOwnerViewProfileLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(displayEmergencyContact, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(pnlFlatOwnerViewProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMobileNumber2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(displayResidents, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(pnlFlatOwnerViewProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMobileNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(displayVehicles, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(321, 321, 321))
        );

        pnlFlatOwnerShowAnnouncement.setBackground(new java.awt.Color(72, 209, 204));
        pnlFlatOwnerShowAnnouncement.setPreferredSize(new java.awt.Dimension(1370, 800));

        tblShowAnnUser.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        tblShowAnnUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ann ID", "Date", "Topic", "Wing(s)", "Announcement"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblShowAnnUser.setRequestFocusEnabled(false);
        tblShowAnnUser.setRowHeight(30);
        jScrollPane4.setViewportView(tblShowAnnUser);

        javax.swing.GroupLayout pnlFlatOwnerShowAnnouncementLayout = new javax.swing.GroupLayout(pnlFlatOwnerShowAnnouncement);
        pnlFlatOwnerShowAnnouncement.setLayout(pnlFlatOwnerShowAnnouncementLayout);
        pnlFlatOwnerShowAnnouncementLayout.setHorizontalGroup(
            pnlFlatOwnerShowAnnouncementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFlatOwnerShowAnnouncementLayout.createSequentialGroup()
                .addGap(212, 212, 212)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(463, Short.MAX_VALUE))
        );
        pnlFlatOwnerShowAnnouncementLayout.setVerticalGroup(
            pnlFlatOwnerShowAnnouncementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFlatOwnerShowAnnouncementLayout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(313, Short.MAX_VALUE))
        );

        pnlFlatOwnerEditProfile.setBackground(new java.awt.Color(72, 209, 204));
        pnlFlatOwnerEditProfile.setPreferredSize(new java.awt.Dimension(1370, 800));

        lblUpdateUserFirstName1.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        lblUpdateUserFirstName1.setText("First Name");

        btnUpdateUserSubmit1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btnUpdateUserSubmit1.setText("Update");
        btnUpdateUserSubmit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateUserSubmit1ActionPerformed(evt);
            }
        });

        showFlatNo.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        lblUpdateUserFirstName3.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        lblUpdateUserFirstName3.setText("Gender");

        lblUpdateUserFirstName4.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        lblUpdateUserFirstName4.setText("Mobile No");

        lblUpdateUserFirstName6.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        lblUpdateUserFirstName6.setText("Last Name");

        lblUpdateUserFirstName7.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        lblUpdateUserFirstName7.setText("Flat No");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        jLabel2.setText("Emergency Contact");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        jLabel3.setText("Vehicles");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        jLabel4.setText("Residents");

        showFirstName.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        showLastName.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        showGender.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        showMobileNo.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        showEmergencyContact.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        showVehicles.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        showResidents.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        btnAddVehicle.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btnAddVehicle.setText("ADD");
        btnAddVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVehicleActionPerformed(evt);
            }
        });

        btnAddMember.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btnAddMember.setText("ADD");
        btnAddMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMemberActionPerformed(evt);
            }
        });

        btnRemoveVehicle.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btnRemoveVehicle.setText("REMOVE");
        btnRemoveVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveVehicleActionPerformed(evt);
            }
        });

        btnRemoveMember.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        btnRemoveMember.setText("REMOVE");
        btnRemoveMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveMemberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFlatOwnerEditProfileLayout = new javax.swing.GroupLayout(pnlFlatOwnerEditProfile);
        pnlFlatOwnerEditProfile.setLayout(pnlFlatOwnerEditProfileLayout);
        pnlFlatOwnerEditProfileLayout.setHorizontalGroup(
            pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFlatOwnerEditProfileLayout.createSequentialGroup()
                .addGroup(pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFlatOwnerEditProfileLayout.createSequentialGroup()
                        .addGap(350, 350, 350)
                        .addGroup(pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUpdateUserFirstName7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblUpdateUserFirstName3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblUpdateUserFirstName1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblUpdateUserFirstName4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblUpdateUserFirstName6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(99, 99, 99)
                        .addGroup(pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(showFlatNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showFirstName)
                            .addComponent(showLastName, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addComponent(showGender, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addComponent(showMobileNo, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addComponent(showEmergencyContact, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addComponent(showVehicles, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showResidents, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(29, 29, 29)
                        .addGroup(pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddVehicle)
                            .addComponent(btnAddMember))
                        .addGap(37, 37, 37)
                        .addGroup(pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRemoveMember)
                            .addComponent(btnRemoveVehicle)))
                    .addGroup(pnlFlatOwnerEditProfileLayout.createSequentialGroup()
                        .addGap(519, 519, 519)
                        .addComponent(btnUpdateUserSubmit1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(300, Short.MAX_VALUE))
        );
        pnlFlatOwnerEditProfileLayout.setVerticalGroup(
            pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFlatOwnerEditProfileLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(showFlatNo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUpdateUserFirstName7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFlatOwnerEditProfileLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblUpdateUserFirstName1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlFlatOwnerEditProfileLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(showFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUpdateUserFirstName6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUpdateUserFirstName3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showGender, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUpdateUserFirstName4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showMobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showEmergencyContact, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showVehicles, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddVehicle, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveVehicle, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFlatOwnerEditProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showResidents, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddMember, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveMember, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addComponent(btnUpdateUserSubmit1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(225, Short.MAX_VALUE))
        );

        pnlFlatOwnerShowReminder.setBackground(new java.awt.Color(72, 209, 204));
        pnlFlatOwnerShowReminder.setPreferredSize(new java.awt.Dimension(1370, 800));

        tblShowRemUser.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        tblShowRemUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rem ID", "Flat No", "Date", "Due Date", "Topic", "Remainder"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblShowRemUser.setRequestFocusEnabled(false);
        tblShowRemUser.setRowHeight(30);
        jScrollPane2.setViewportView(tblShowRemUser);

        javax.swing.GroupLayout pnlFlatOwnerShowReminderLayout = new javax.swing.GroupLayout(pnlFlatOwnerShowReminder);
        pnlFlatOwnerShowReminder.setLayout(pnlFlatOwnerShowReminderLayout);
        pnlFlatOwnerShowReminderLayout.setHorizontalGroup(
            pnlFlatOwnerShowReminderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFlatOwnerShowReminderLayout.createSequentialGroup()
                .addGap(203, 203, 203)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(367, Short.MAX_VALUE))
        );
        pnlFlatOwnerShowReminderLayout.setVerticalGroup(
            pnlFlatOwnerShowReminderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFlatOwnerShowReminderLayout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(298, Short.MAX_VALUE))
        );

        pnlFlatOwner.setLayer(pnlFlatOwnerViewProfile, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwner.setLayer(pnlFlatOwnerShowAnnouncement, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwner.setLayer(pnlFlatOwnerEditProfile, javax.swing.JLayeredPane.DEFAULT_LAYER);
        pnlFlatOwner.setLayer(pnlFlatOwnerShowReminder, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout pnlFlatOwnerLayout = new javax.swing.GroupLayout(pnlFlatOwner);
        pnlFlatOwner.setLayout(pnlFlatOwnerLayout);
        pnlFlatOwnerLayout.setHorizontalGroup(
            pnlFlatOwnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(pnlFlatOwnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlFlatOwnerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlFlatOwnerViewProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(pnlFlatOwnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlFlatOwnerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlFlatOwnerShowAnnouncement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(pnlFlatOwnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlFlatOwnerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlFlatOwnerEditProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(pnlFlatOwnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlFlatOwnerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlFlatOwnerShowReminder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        pnlFlatOwnerLayout.setVerticalGroup(
            pnlFlatOwnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(pnlFlatOwnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlFlatOwnerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlFlatOwnerViewProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(pnlFlatOwnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlFlatOwnerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlFlatOwnerShowAnnouncement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(pnlFlatOwnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlFlatOwnerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlFlatOwnerEditProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(pnlFlatOwnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlFlatOwnerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlFlatOwnerShowReminder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        btnFlatOwnersLogout.setFont(new java.awt.Font("Comic Sans MS", 0, 20)); // NOI18N
        btnFlatOwnersLogout.setText("Logout");
        btnFlatOwnersLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFlatOwnersLogoutActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 28)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("flat owner");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnFlatOwnerViewProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnFlatOwnersEditProfile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnFlatOwnerViewAnnouncement, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnFlatOwnerReminder, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnFlatOwnersIssues, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnFlatOwnersLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlFlatOwner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(558, 558, 558)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(2762, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnFlatOwnerViewProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(btnFlatOwnersEditProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(btnFlatOwnerViewAnnouncement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(btnFlatOwnerReminder, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(btnFlatOwnersIssues, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(btnFlatOwnersLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlFlatOwner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(1306, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnFlatOwnerViewProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFlatOwnerViewProfileActionPerformed
        // TODO add your handling code here:
         pnlFlatOwner.removeAll();
        pnlFlatOwner.revalidate();
       showVehicles.removeAllItems();
        showResidents.removeAllItems();
//        initComponents();
//pnlFlatOwnerViewProfile.
        pnlFlatOwner.add(pnlFlatOwnerViewProfile);
        pnlFlatOwner.revalidate();    
        
         displayResidents.removeAllItems();
                        showResidents.removeAll();
        
        try{
            System.out.println("Item count is " + displayResidents.getItemCount());
            for(int i=0; i<displayResidents.getItemCount(); i++){
                displayResidents.remove(i);
            }
            MongoClient mongo = new MongoClient( "localhost" , 27017 ); 
             MongoDatabase db = mongo.getDatabase("RESIDEM");
             //db.createCollection("AnnouncementsDB");
             MongoCollection<Document> FlatOwnerDB = db.getCollection("FlatOwnerDB");
             
                    FindIterable<Document> iterable =  FlatOwnerDB.find (Filters.eq("flatNo", username));
                    MongoCursor<Document> cursor = iterable.iterator();
                    if(cursor.hasNext()){
                        Document entry = cursor.next();          
                        
                        displayFirstName.setText(entry.get("firstname").toString());
                        displayLastName.setText(entry.get("lastname").toString());
                        displayFlatNo.setText(entry.get("flatNo").toString());
                        displayMobileNo.setText(entry.get("mobileNo").toString());
                        displayEmergencyContact.setText(entry.get("emergencyContact").toString());
                        if(entry.get("gender")!=null){
                        displayGender.setText(entry.get("gender").toString());
                            
                        }
                        
                       
                        if(entry.getList("residents", Document.class) != null ){
                            List<Document> array ;
                            array = entry.getList("residents", Document.class);
                            Iterator it = array.iterator();
                            while (it.hasNext()){
                                
                                String gen = it.next().toString();
                                String name = gen.substring(15, (gen.length() - 2));
                                System.out.println("Memebr is" + name);
                                displayResidents.addItem(name);
                                
                            }
                        }
                            System.out.println("before if" );
                        if(entry.getList("vehicles", Document.class) != null){
                            System.out.println("Enetered if" );
                            List<Document> array ;
                            array = entry.getList("vehicles", Document.class);
                            Iterator it = array.iterator();
                            while (it.hasNext()){
                                
                                String gen = it.next().toString();
                                System.out.println("Vehicle is" + gen);
                                String vehicle = gen.substring(13, 23);
                                String type = gen.substring(30, (gen.length()-2));
                                String op = vehicle + "  [" + type + "]";
                                System.out.println("Vehicle is" + op);
                                displayVehicles.addItem(op);
                            }
                        }
                        
//                        displayVehicles.
                    }
                   
                  
//               mongo.close();
        }
        catch(Exception e){
            System.out.print(e);
        }
        
    }//GEN-LAST:event_btnFlatOwnerViewProfileActionPerformed

    private void btnFlatOwnersEditProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFlatOwnersEditProfileActionPerformed
        // TODO add your handling code here:
        pnlFlatOwner.removeAll();
        displayVehicles.removeAllItems();
        displayResidents.removeAllItems();
        pnlFlatOwner.revalidate();
//        initComponents();
        pnlFlatOwner.add(pnlFlatOwnerEditProfile);
        pnlFlatOwner.revalidate();
        try{
            MongoClient mongo = new MongoClient( "localhost" , 27017 ); 
             MongoDatabase db = mongo.getDatabase("RESIDEM");
             //db.createCollection("AnnouncementsDB");
             MongoCollection<Document> FlatOwnerDB = db.getCollection("FlatOwnerDB");
             
                    FindIterable<Document> iterable =  FlatOwnerDB.find (Filters.eq("flatNo", username));
                    MongoCursor<Document> cursor = iterable.iterator();
                    if(cursor.hasNext()){
                        Document entry = cursor.next();          
                        
                        showFirstName.setText(entry.get("firstname").toString());
                        showLastName.setText(entry.get("lastname").toString());
                        showFlatNo.setText(entry.get("flatNo").toString());
                        showMobileNo.setText(entry.get("mobileNo").toString());
                        showEmergencyContact.setText(entry.get("emergencyContact").toString());
                        if(entry.get("gender")!=null){
                        showGender.setText(entry.get("gender").toString());
                            
                        }
                        showResidents.removeAllItems();
                        showResidents.removeAll();
                         if(entry.getList("residents", Document.class) != null){
                            List<Document> array ;
                            array = entry.getList("residents", Document.class);
                            Iterator it = array.iterator();
                            while (it.hasNext()){
                                
                                String gen = it.next().toString();
                                String name = gen.substring(15, (gen.length() - 2));
                                System.out.println("Memebr is" + name);
                                showResidents.addItem(name);
                            }
                        }
                            System.out.println("before if" );
                        if(entry.getList("vehicles", Document.class) != null){
                            System.out.println("Enetered if" );
                            List<Document> array ;
                            array = entry.getList("vehicles", Document.class);
                            Iterator it = array.iterator();
                            while (it.hasNext()){
                                
                                String gen = it.next().toString();
                                System.out.println("Vehicle is" + gen);
                                String vehicle = gen.substring(13, 23);
                                String type = gen.substring(30, (gen.length()-2));
                                String op = vehicle + "  [" + type + "]";
                                System.out.println("Vehicle is" + op);
                                showVehicles.addItem(op);
                            }
                        }
//                        if(entry.get("noOfPeople")!=null){
//                        showNoOfPeople.setText(entry.get("noOfPeople").toString());
//                            
//                        }
                       
                        
//                        displayVehicles.
                    }
                   
                  
//               mongo.close();
        }
        catch(Exception e){
            System.out.print(e);
        }
    }//GEN-LAST:event_btnFlatOwnersEditProfileActionPerformed

    private void btnFlatOwnerViewAnnouncementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFlatOwnerViewAnnouncementActionPerformed
        // TODO add your handling code here:
        pnlFlatOwner.removeAll();
        pnlFlatOwner.revalidate();
        pnlFlatOwner.add(pnlFlatOwnerShowAnnouncement);
        pnlFlatOwner.revalidate();
        
        
        String ColumnName[] = {"Ann ID" ,"Date", "Topic", "Wing(s)", "Announcement"};
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(ColumnName);
        tblShowAnnUser.setModel(model);
        try{
            try (MongoClient mongo = new MongoClient( "localhost" , 27017 )) {
                MongoDatabase db = mongo.getDatabase("RESIDEM");
                //db.createCollection("AnnouncementsDB");
                MongoCollection<Document> AnnouncementsDB = db.getCollection("AnnouncementsDB");
                
                FindIterable<Document> iterable =  AnnouncementsDB.find ();
                MongoCursor<Document> cursor = iterable.iterator();
                while(cursor.hasNext()){
                    Document entry = cursor.next();
                    model.addRow( new Object[]{ entry.get("annid"), entry.get("date"), entry.get("topic"), entry.get("wing"), entry.get("announcement") });
                }
            }
        }
        catch(Exception e){
            System.out.print(e);
        }
    }//GEN-LAST:event_btnFlatOwnerViewAnnouncementActionPerformed

    private void btnFlatOwnersIssuesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFlatOwnersIssuesActionPerformed
        // TODO add your handling code here:
        new Issues(username).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnFlatOwnersIssuesActionPerformed

    private void btnFlatOwnerReminderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFlatOwnerReminderActionPerformed
        // TODO add your handling code here:
        pnlFlatOwner.removeAll();
        pnlFlatOwner.revalidate();
        pnlFlatOwner.add(pnlFlatOwnerShowReminder);
        pnlFlatOwner.revalidate();
        
        String ColumnName[] = {"Rem ID" ,"Flat No", "Date", "Due Date", "Topic", "Reminder"};
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(ColumnName);
        tblShowRemUser.setModel(model);
        try{
            MongoClient mongo = new MongoClient( "localhost" , 27017 ); 
             MongoDatabase db = mongo.getDatabase("RESIDEM");
             //db.createCollection("AnnouncementsDB");
             MongoCollection<Document> RemindersDB = db.getCollection("RemindersDB");
             
                    FindIterable<Document> iterable =  RemindersDB.find (Filters.eq("flatNo", username));
                    MongoCursor<Document> cursor = iterable.iterator();
                    while(cursor.hasNext()){
                        Document entry = cursor.next();
                        model.addRow( new Object[]{ entry.get("remid"), entry.get("flatNo"), entry.get("date"), entry.get("dueDate"), entry.get("topic"), entry.get("reminder") });                                      
                    }
                   
                  
               mongo.close();
        }
        catch(Exception e){
            System.out.print(e);
        }
    }//GEN-LAST:event_btnFlatOwnerReminderActionPerformed

    private void btnUpdateUserSubmit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateUserSubmit1ActionPerformed
        // TODO add your handling code here:
        boolean flag=false;
        try{
            MongoClient mongo = new MongoClient( "localhost" , 27017 ); 
             MongoDatabase db = mongo.getDatabase("RESIDEM");
             //db.createCollection("AnnouncementsDB");
             MongoCollection<Document> FlatOwnerDB = db.getCollection("FlatOwnerDB");
             
                    FindIterable<Document> iterable =  FlatOwnerDB.find (Filters.eq("flatNo", username));
                    MongoCursor<Document> cursor = iterable.iterator();
                    if(cursor.hasNext()){
                        Document entry = cursor.next();          
//                        
//                        showFirstName.setText(entry.get("firstname").toString());
//                        showLastName.setText(entry.get("lastname").toString());
//                        showFlatNo.setText(entry.get("flatNo").toString());
//                        showMobileNo.setText(entry.get("mobileNo").toString());
//                        showEmergencyContact.setText(entry.get("emergencyContact").toString());
//                        if(entry.get("gender")!=null){
//                        showGender.setText(entry.get("gender").toString());
                            
//                        }
//                        if(entry.get("noOfPeople")!=null){
//                        showNoOfPeople.setText(entry.get("noOfPeople").toString());
//                            
//                        }
                        String ufname = showFirstName.getText();
                        String ulname = showLastName.getText();
                        String ugender = showGender.getText();
                        String umobileno = showMobileNo.getText();
                        String uemergency = showEmergencyContact.getText();
                        if(showFirstName!=null){//FirstName should never be kept null
                            Bson filter = eq("flatNo", entry.get("flatNo"));
                            if(ufname !=  entry.get("firstname").toString() && ufname!=null){
                                Bson updateOperation = set("firstname", ufname);
                                FlatOwnerDB.updateOne(filter, updateOperation);
                                flag=true;
                            }
                            if(ulname !=entry.get("lastname").toString() ){
                                Bson updateOperation = set("lastname", ulname);
                                FlatOwnerDB.updateOne(filter, updateOperation);
                                flag=true;
                                
                            }
                            if(entry.get("gender")==null || ugender != entry.get("gender").toString() && ugender!=null){
                                Bson updateOperation = set("gender", ugender);
                                FlatOwnerDB.updateOne(filter, updateOperation);
                                flag=true;
                                
                            }
                            if( umobileno != entry.get("mobileNo").toString() && umobileno!=null ){
                                Bson updateOperation = set("mobileNo", umobileno);
                                FlatOwnerDB.updateOne(filter, updateOperation);
                                flag=true;
                                
                            }
                            if( uemergency != entry.get("emergencyContact").toString() && uemergency!=null){
                                Bson updateOperation = set("emergencyContact", uemergency);
                                FlatOwnerDB.updateOne(filter, updateOperation);   
                                flag=true;                             
                            }
                        }
                        
//                        displayVehicles.
                    }
                   
                    if(flag == true){
                        infoMessage("Profile Updated!", "Success");
                    }
                    else{
                        infoMessage("No Updations in Profile!", "Success");
                    }
                  
               mongo.close();
        }
        catch(Exception e){
            System.out.print(e);
        }
        pnlFlatOwner.removeAll();
        pnlFlatOwner.revalidate();
        pnlFlatOwner.add(pnlFlatOwnerEditProfile);
        pnlFlatOwner.revalidate(); 
        
    }//GEN-LAST:event_btnUpdateUserSubmit1ActionPerformed

    private void btnFlatOwnersLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFlatOwnersLogoutActionPerformed
        // TODO add your handling code here:
       JOptionPane confirm = new JOptionPane();       
       int input =  confirm.showConfirmDialog(rootPane, "Do you wish to continue?");
        if(  input == JOptionPane.YES_OPTION){
            dispose();         
            System.exit(0);
         }
        else if( input == JOptionPane.NO_OPTION){
            this.dispose();
            new FlatOwner().setVisible(true);
        }
        
    }//GEN-LAST:event_btnFlatOwnersLogoutActionPerformed

    private void btnAddVehicleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVehicleActionPerformed
        // TODO add your handling code here:
//       javax.swing.JPanel jp = new javax.swing.JPanel();
//       javax.swing.JTextField text1 = new javax.swing.JTextField();
//       javax.swing.JTextField text2 = new javax.swing.JTextField();
//       jp.add(text1);
//       jp.add(text2);
//       jp.show();
//       jp.setLayout(new GridLayout(0,1));
//       jp.setVisible(true);
//       pnlFlatOwner.removeAll();
//        pnlFlatOwner.revalidate();
//       pnlFlatOwner.add(jp);
//        pnlFlatOwner.revalidate();
try{
JPanel panel = new JPanel();
      LayoutManager layout = new FlowLayout();  
      panel.setLayout(layout);    
      final JLabel label = new JLabel();
      String nvehicleno = (String)JOptionPane.showInputDialog(
               rootPane,              
               "Enter Vehicle No", 
               "Add Vehicle",            
               JOptionPane.PLAIN_MESSAGE,
               null,            
               null, 
               "eg MH12AA1234"
            );                      
    final JLabel label1 = new JLabel();
    String ntype = (String)JOptionPane.showInputDialog(
               rootPane,
              
               "Enter Vehicle Type", 
               "Add Vehicle",            
               JOptionPane.PLAIN_MESSAGE,
               null,            
               null, 
               "eg Car/Bike"
            );
       MongoClient mongo = new MongoClient( "localhost" , 27017 ); 
             MongoDatabase db = mongo.getDatabase("RESIDEM");
             //db.createCollection("AnnouncementsDB");
             MongoCollection<Document> FlatOwnerDB = db.getCollection("FlatOwnerDB");             
              FindIterable<Document> iterable =  FlatOwnerDB.find (Filters.eq("flatNo", username));
              
    
    
    
    
    
            if((ntype != null && ntype.length() > 0) && (nvehicleno != null && nvehicleno.length() > 0)  ){
               
               //add db code
                Bson filter = Filters.eq("username", username);
                 Bson addOp = Updates.addToSet("vehicles", new Document("no", nvehicleno.toString()).append("type",ntype));
                        FlatOwnerDB.updateOne(filter, addOp);
                        JOptionPane.showMessageDialog(null, "Record has been Added!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        this.dispose();
                        new FlatOwner(username).setVisible(true);
//                        if(JOptionPane.OK_OPTION == 0){
//                             pnlFlatOwner.removeAll();
//        displayVehicles.removeAllItems();
//        displayResidents.removeAllItems();
//        pnlFlatOwner.revalidate();
////        initComponents();
//        pnlFlatOwner.add(pnlFlatOwnerEditProfile);
//        pnlFlatOwner.revalidate();
//                        }
                        
                        
            }
           
            
            panel.add(label);
            panel.add(label1);
            pnlFlatOwner.add(panel);
            
}
catch(Exception e){
    e.printStackTrace();
}


    }//GEN-LAST:event_btnAddVehicleActionPerformed

    private void btnRemoveVehicleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveVehicleActionPerformed
        // TODO add your handling code here:
        try{
         JPanel panel = new JPanel(new GridBagLayout());
         Vector<String> vehicles = new Vector<>();
//      String[] vehicles = new String[10];
      
      
            MongoClient mongo = new MongoClient( "localhost" , 27017 ); 
             MongoDatabase db = mongo.getDatabase("RESIDEM");
             //db.createCollection("AnnouncementsDB");
             MongoCollection<Document> FlatOwnerDB = db.getCollection("FlatOwnerDB");
             
                    FindIterable<Document> iterable =  FlatOwnerDB.find (Filters.eq("flatNo", username));
                    MongoCursor<Document> cursor = iterable.iterator();
                    if(cursor.hasNext()){
                        Document entry = cursor.next();          
                            if(entry.getList("vehicles", Document.class) != null){
                            List<Document> array ;
                            array = entry.getList("vehicles", Document.class);
                            Iterator it = array.iterator();
                            while (it.hasNext()){                                
                                String gen = it.next().toString();
                                System.out.println("Vehicle is" + gen);
                                String vehicle = gen.substring(13, 23);
                                String type = gen.substring(30, (gen.length()-2));
                                String op = vehicle + "  [" + type + "]";
                                System.out.println("Vehicle is" + op);
//                                int a = vehicles.length;
//                                vehicles[a] = op;
                                vehicles.add(op);

//                                comboBox.addItem(op);
                            }
                        }
                            
                        JComboBox comboBox = new JComboBox(vehicles); 
                        comboBox.setSelectedIndex(0);                        
                        JOptionPane.showMessageDialog(rootPane, comboBox, "Vehicle",  JOptionPane.QUESTION_MESSAGE);
                        
                        panel.add(comboBox);
                        pnlFlatOwner.add(panel);
                        
                        String select = comboBox.getSelectedItem().toString();
                        String toDelete = select.substring(0, 10);
                        System.out.println("Selected entry is " + toDelete);
                        Bson filter = Filters.eq("username", username);
                        Bson deleteOp = Updates.pull("vehicles", new Document("no", toDelete.toString()));
                        FlatOwnerDB.updateOne(filter, deleteOp);
                         JOptionPane.showMessageDialog(null, "Record has been Deleted!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        this.dispose();
                        new FlatOwner(username).setVisible(true);
                    }
        }
        catch(Exception e){
            e.printStackTrace();
        }
        
       
        
    }//GEN-LAST:event_btnRemoveVehicleActionPerformed

    private void btnAddMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMemberActionPerformed
        // TODO add your handling code here:
        try{
JPanel panel = new JPanel();
      LayoutManager layout = new FlowLayout();  
      panel.setLayout(layout);    
      final JLabel label = new JLabel();
      String resident = (String)JOptionPane.showInputDialog(
               rootPane,              
               "Enter Full Name", 
               "Add Member",            
               JOptionPane.PLAIN_MESSAGE,
               null,            
               null, 
               ""
            );                      
//    final JLabel label1 = new JLabel();
//    String ntype = (String)JOptionPane.showInputDialog(
//               rootPane,
//              
//               "Enter Vehicle Type", 
//               "Add Vehicle",            
//               JOptionPane.PLAIN_MESSAGE,
//               null,            
//               null, 
//               "eg Car/Bike"
//            );
       MongoClient mongo = new MongoClient( "localhost" , 27017 ); 
             MongoDatabase db = mongo.getDatabase("RESIDEM");
             //db.createCollection("AnnouncementsDB");
             MongoCollection<Document> FlatOwnerDB = db.getCollection("FlatOwnerDB");             
              FindIterable<Document> iterable =  FlatOwnerDB.find (Filters.eq("flatNo", username));
              
    
    
    
    
    
            if(resident != null && resident.length() > 0   ){
               
               //add db code
                Bson filter = Filters.eq("username", username);
                 Bson addOp = Updates.addToSet("residents", new Document("name", resident.toString()));
                        FlatOwnerDB.updateOne(filter, addOp);
                        JOptionPane.showMessageDialog(null, "Record has been Added!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        this.dispose();
                        new FlatOwner(username).setVisible(true);
//                        if(JOptionPane.OK_OPTION == 0){
//                             pnlFlatOwner.removeAll();
//        displayVehicles.removeAllItems();
//        displayResidents.removeAllItems();
//        pnlFlatOwner.revalidate();
////        initComponents();
//        pnlFlatOwner.add(pnlFlatOwnerEditProfile);
//        pnlFlatOwner.revalidate();
//                        }
                        
                        
            }
           
            
            panel.add(label);
            pnlFlatOwner.add(panel);
            
}
catch(Exception e){
    e.printStackTrace();
}
    }//GEN-LAST:event_btnAddMemberActionPerformed

    private void btnRemoveMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveMemberActionPerformed
        // TODO add your handling code here:
        try{
         JPanel panel = new JPanel(new GridBagLayout());
         Vector<String> residents = new Vector<>();
//      String[] vehicles = new String[10];
      
      
            MongoClient mongo = new MongoClient( "localhost" , 27017 ); 
             MongoDatabase db = mongo.getDatabase("RESIDEM");
             //db.createCollection("AnnouncementsDB");
             MongoCollection<Document> FlatOwnerDB = db.getCollection("FlatOwnerDB");
             
                    FindIterable<Document> iterable =  FlatOwnerDB.find (Filters.eq("flatNo", username));
                    MongoCursor<Document> cursor = iterable.iterator();
                    if(cursor.hasNext()){
                        Document entry = cursor.next();          
                            if(entry.getList("residents", Document.class) != null){
                            List<Document> array ;
                            array = entry.getList("residents", Document.class);
                            Iterator it = array.iterator();
                            while (it.hasNext()){                                
                                String gen = it.next().toString();
                                System.out.println("Vehicle is" + gen);
                                String resident = gen.substring(15, (gen.length()-2));
//                                String type = gen.substring(30, (gen.length()-2));
//                                String op = vehicle + "  [" + type + "]";
//                                System.out.println("Vehicle is" + op);
//                                int a = vehicles.length;
//                                vehicles[a] = op;
                                residents.add(resident);

//                                comboBox.addItem(op);
                            }
                        }
                            
                        JComboBox comboBox = new JComboBox(residents); comboBox.setSelectedIndex(0);                        
                        JOptionPane.showMessageDialog(rootPane, comboBox, "Residents",  JOptionPane.QUESTION_MESSAGE);
                        
                        panel.add(comboBox);
                        pnlFlatOwner.add(panel);
                        
                        String select = comboBox.getSelectedItem().toString();
                        String toDelete = select.toString();
                        System.out.println("Selected entry is " + toDelete);
                        Bson filter = Filters.eq("username", username);
                        Bson deleteOp = Updates.pull("residents", new Document("name", toDelete.toString()));
                        FlatOwnerDB.updateOne(filter, deleteOp);
                         JOptionPane.showMessageDialog(null, "Record has been Deleted!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        this.dispose();
                        new FlatOwner(username).setVisible(true);
                    }
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnRemoveMemberActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlatOwner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlatOwner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlatOwner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlatOwner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FlatOwner().setVisible(true);
        });
        
         //MongoClient mongo = new MongoClient( "localhost" , 27017 ); 
   
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMember;
    private javax.swing.JButton btnAddVehicle;
    private javax.swing.JButton btnFlatOwnerReminder;
    private javax.swing.JButton btnFlatOwnerViewAnnouncement;
    private javax.swing.JButton btnFlatOwnerViewProfile;
    private javax.swing.JButton btnFlatOwnersEditProfile;
    private javax.swing.JButton btnFlatOwnersIssues;
    private javax.swing.JButton btnFlatOwnersLogout;
    private javax.swing.JButton btnRemoveMember;
    private javax.swing.JButton btnRemoveVehicle;
    private javax.swing.JButton btnUpdateUserSubmit1;
    private javax.swing.JLabel displayEmergencyContact;
    private javax.swing.JLabel displayFirstName;
    private javax.swing.JLabel displayFlatNo;
    private javax.swing.JLabel displayGender;
    private javax.swing.JLabel displayLastName;
    private javax.swing.JLabel displayMobileNo;
    private javax.swing.JComboBox<String> displayResidents;
    private javax.swing.JComboBox<String> displayVehicles;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblApartmentName;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblMobileNumber;
    private javax.swing.JLabel lblMobileNumber1;
    private javax.swing.JLabel lblMobileNumber2;
    private javax.swing.JLabel lblMobileNumber3;
    private javax.swing.JLabel lblUpdateUserFirstName1;
    private javax.swing.JLabel lblUpdateUserFirstName3;
    private javax.swing.JLabel lblUpdateUserFirstName4;
    private javax.swing.JLabel lblUpdateUserFirstName6;
    private javax.swing.JLabel lblUpdateUserFirstName7;
    private javax.swing.JLayeredPane pnlFlatOwner;
    private javax.swing.JPanel pnlFlatOwnerEditProfile;
    private javax.swing.JPanel pnlFlatOwnerShowAnnouncement;
    private javax.swing.JPanel pnlFlatOwnerShowReminder;
    private javax.swing.JLayeredPane pnlFlatOwnerViewProfile;
    private javax.swing.JTextField showEmergencyContact;
    private javax.swing.JTextField showFirstName;
    private javax.swing.JLabel showFlatNo;
    private javax.swing.JTextField showGender;
    private javax.swing.JTextField showLastName;
    private javax.swing.JTextField showMobileNo;
    private javax.swing.JComboBox<String> showResidents;
    private javax.swing.JComboBox<String> showVehicles;
    private javax.swing.JTable tblShowAnnUser;
    private javax.swing.JTable tblShowRemUser;
    // End of variables declaration//GEN-END:variables
}
